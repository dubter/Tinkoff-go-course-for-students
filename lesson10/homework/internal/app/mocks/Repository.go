// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	ads "homework10/internal/ads"

	mock "github.com/stretchr/testify/mock"

	users "homework10/internal/users"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddAd provides a mock function with given fields: ad
func (_m *Repository) AddAd(ad *ads.Ad) {
	_m.Called(ad)
}

// AddUser provides a mock function with given fields: user
func (_m *Repository) AddUser(user *users.User) {
	_m.Called(user)
}

// ChangeAd provides a mock function with given fields: ad
func (_m *Repository) ChangeAd(ad *ads.Ad) bool {
	ret := _m.Called(ad)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*ads.Ad) bool); ok {
		r0 = rf(ad)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ChangeUser provides a mock function with given fields: user
func (_m *Repository) ChangeUser(user *users.User) bool {
	ret := _m.Called(user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*users.User) bool); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteAd provides a mock function with given fields: adId
func (_m *Repository) DeleteAd(adId int64) {
	_m.Called(adId)
}

// DeleteUser provides a mock function with given fields: uerId
func (_m *Repository) DeleteUser(uerId int64) {
	_m.Called(uerId)
}

// GetAdById provides a mock function with given fields: id
func (_m *Repository) GetAdById(id int64) (ads.Ad, error) {
	ret := _m.Called(id)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (ads.Ad, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) ads.Ad); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAds provides a mock function with given fields: filters
func (_m *Repository) GetAds(filters map[string]interface{}) []ads.Ad {
	ret := _m.Called(filters)

	var r0 []ads.Ad
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []ads.Ad); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	return r0
}

// GetAdsByTitle provides a mock function with given fields: pattern
func (_m *Repository) GetAdsByTitle(pattern string) []ads.Ad {
	ret := _m.Called(pattern)

	var r0 []ads.Ad
	if rf, ok := ret.Get(0).(func(string) []ads.Ad); ok {
		r0 = rf(pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	return r0
}

// GetAdsPrimaryKey provides a mock function with given fields:
func (_m *Repository) GetAdsPrimaryKey() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetUserById provides a mock function with given fields: id
func (_m *Repository) GetUserById(id int64) (users.User, error) {
	ret := _m.Called(id)

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (users.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) users.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersPrimaryKey provides a mock function with given fields:
func (_m *Repository) GetUsersPrimaryKey() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
