// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	ads "homework10/internal/ads"

	mock "github.com/stretchr/testify/mock"

	users "homework10/internal/users"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// ChangeAdStatus provides a mock function with given fields: adId, userId, published
func (_m *App) ChangeAdStatus(adId int64, userId int64, published bool) (*ads.Ad, error) {
	ret := _m.Called(adId, userId, published)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, bool) (*ads.Ad, error)); ok {
		return rf(adId, userId, published)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, bool) *ads.Ad); ok {
		r0 = rf(adId, userId, published)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, bool) error); ok {
		r1 = rf(adId, userId, published)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAd provides a mock function with given fields: title, text, userId
func (_m *App) CreateAd(title string, text string, userId int64) (*ads.Ad, error) {
	ret := _m.Called(title, text, userId)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64) (*ads.Ad, error)); ok {
		return rf(title, text, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) *ads.Ad); ok {
		r0 = rf(title, text, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(title, text, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: nickname, email
func (_m *App) CreateUser(nickname string, email string) (*users.User, error) {
	ret := _m.Called(nickname, email)

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*users.User, error)); ok {
		return rf(nickname, email)
	}
	if rf, ok := ret.Get(0).(func(string, string) *users.User); ok {
		r0 = rf(nickname, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(nickname, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAd provides a mock function with given fields: adId, userId
func (_m *App) DeleteAd(adId int64, userId int64) error {
	ret := _m.Called(adId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(adId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: userId
func (_m *App) DeleteUser(userId int64) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAd provides a mock function with given fields: id
func (_m *App) GetAd(id int64) (*ads.Ad, error) {
	ret := _m.Called(id)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*ads.Ad, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *ads.Ad); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListAds provides a mock function with given fields: filters
func (_m *App) GetListAds(filters map[string]interface{}) []ads.Ad {
	ret := _m.Called(filters)

	var r0 []ads.Ad
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []ads.Ad); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	return r0
}

// GetListAdsByTitle provides a mock function with given fields: pattern
func (_m *App) GetListAdsByTitle(pattern string) []ads.Ad {
	ret := _m.Called(pattern)

	var r0 []ads.Ad
	if rf, ok := ret.Get(0).(func(string) []ads.Ad); ok {
		r0 = rf(pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	return r0
}

// GetUser provides a mock function with given fields: userId
func (_m *App) GetUser(userId int64) (*users.User, error) {
	ret := _m.Called(userId)

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*users.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int64) *users.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAd provides a mock function with given fields: adId, userId, title, text
func (_m *App) UpdateAd(adId int64, userId int64, title string, text string) (*ads.Ad, error) {
	ret := _m.Called(adId, userId, title, text)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, string, string) (*ads.Ad, error)); ok {
		return rf(adId, userId, title, text)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, string, string) *ads.Ad); ok {
		r0 = rf(adId, userId, title, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, string, string) error); ok {
		r1 = rf(adId, userId, title, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: userId, nickname, email
func (_m *App) UpdateUser(userId int64, nickname string, email string) (*users.User, error) {
	ret := _m.Called(userId, nickname, email)

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, string) (*users.User, error)); ok {
		return rf(userId, nickname, email)
	}
	if rf, ok := ret.Get(0).(func(int64, string, string) *users.User); ok {
		r0 = rf(userId, nickname, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string, string) error); ok {
		r1 = rf(userId, nickname, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewApp interface {
	mock.TestingT
	Cleanup(func())
}

// NewApp creates a new instance of App. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApp(t mockConstructorTestingTNewApp) *App {
	mock := &App{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
